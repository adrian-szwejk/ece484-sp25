from wsgiref.validate import PartialIteratorWrapper
from mp0_p1 import VehicleAgent, PedestrianAgent, VehiclePedestrianSensor, eval_velocity, sample_init
from verse import Scenario, ScenarioConfig
from vehicle_controller import VehicleMode, PedestrianMode

from verse.plotter.plotter2D import *
from verse.plotter.plotter3D_new import *
import plotly.graph_objects as go
import copy

if __name__ == "__main__":
    import os 
    script_dir = os.path.realpath(os.path.dirname(__file__))
    input_code_name = os.path.join(script_dir, "vehicle_controller.py")
    vehicle = VehicleAgent('car', file_name=input_code_name)
    pedestrian = PedestrianAgent('pedestrian')

    scenario = Scenario(ScenarioConfig(init_seg_length=1, parallel=False))

    scenario.add_agent(vehicle) 
    scenario.add_agent(pedestrian)
    scenario.set_sensor(VehiclePedestrianSensor())

    # # ----------- Different initial ranges -------------
    # # Uncomment this block to use R1
    # init_car = [[-5,-5,0,8],[5,5,0,8]]
    # init_pedestrian = [[175,-55,0,3],[175,-55,0,3]]
    # # -----------------------------------------

    # # Uncomment this block to use R2
    # init_car = [[-5,-5,0,7.5],[5,5,0,8.5]]
    # init_pedestrian = [[175,-55,0,3],[175,-55,0,3]]
    # # -----------------------------------------

    # # Uncomment this block to use R3
    init_car = [[-5,-5,0,7.5],[5,5,0,8.5]]
    init_pedestrian = [[173,-55,0,3],[176,-53,0,3]]
    # # -----------------------------------------

    scenario.set_init_single(
        'car', init_car,(VehicleMode.Normal,)
    )
    scenario.set_init_single(
        'pedestrian', init_pedestrian, (PedestrianMode.Normal,)
    )

    traces = []
    fig = go.Figure()
    n=1000
    for i in range(n):
        # * trace = scenario.simulate(time_horizon, time_step)
            # time_horizon: the total time for the scenario to evolve.
            # time_step: the time step for each simulation step.
        trace = scenario.simulate(50, 0.1)
        traces.append(trace)
        fig = simulation_tree_3d(trace, fig,\
                                0,'time', 1,'x',2,'y')
    
    # traces = scenario.simulate_multi(50, 0.1, init_dict_list) 
    avg_vel, unsafe_frac, unsafe_init = eval_velocity(traces)
    fig.show()
    
    # # ----------- verify no refine: Uncomment this block to perform verification without refinement ----------
    traces = scenario.verify(50, 0.1)
    fig = go.Figure()
    fig = reachtube_tree_3d(traces, fig,\
                              0,'time', 1,'x',2,'y')
    fig.show()

    

# * traces = scenario.simulate_multi(time_horizon, time_step, init_dict_list) 
    # simulate from all initial points in the init_dict_list 
    # init_dict_list: List of dictionaries, list of initial points to simulate from
    # For example, an init_dict_list of [{’car’: [-5,25,6,8], ’pedestrian’:[170,-53,0,3]}] 
    # will simulate starting from the car state [-5,25,6,8] and pedestrian state [170,-53,0,3].
# * fig = simulation_tree_3d(tree, fig, x, x_title, y, y_title, z, z_title): 
    # Visualize result from scenario.simulate_simple.
    # • tree: The resulting tree output generated by the scenario.simulate_simple function.
    # • fig: Figure object, the figure object to plot on. This fig may be reused to put multiple simulated
    # trajectories onto one plot
    # • x,y,z: Int, the index of x (or y, z) dimension to be plotted.
    # • x_title, y_title, z_title: Str, the x, y, z axis label
    # • fig: Figure object. A 3d plot with tree axes as time and x,y position of C and P. The plot can be shown
    # using the fig.show() function as shown in Listing 3